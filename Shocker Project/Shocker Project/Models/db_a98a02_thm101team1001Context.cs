// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Shocker_Project.Models
{
    public partial class db_a98a02_thm101team1001Context : DbContext
    {
        public db_a98a02_thm101team1001Context()
        {
        }

        public db_a98a02_thm101team1001Context(DbContextOptions<db_a98a02_thm101team1001Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Addresses> Addresses { get; set; }
        public virtual DbSet<ClientCases> ClientCases { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Pictures> Pictures { get; set; }
        public virtual DbSet<ProductCategories> ProductCategories { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<QuestionCategories> QuestionCategories { get; set; }
        public virtual DbSet<Ratings> Ratings { get; set; }
        public virtual DbSet<Shopping> Shopping { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Addresses>(entity =>
            {
                entity.HasKey(e => new { e.Address, e.UserAccount })
                    .HasName("PK_Addresses_1");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.UserAccount).HasMaxLength(50);

                entity.HasOne(d => d.UserAccountNavigation)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.UserAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Addresses_Users");
            });

            modelBuilder.Entity<ClientCases>(entity =>
            {
                entity.HasKey(e => e.CaseId)
                    .HasName("PK_ClientCases_1");

                entity.Property(e => e.CaseId).HasColumnName("CaseID");

                entity.Property(e => e.AdminAccount).HasMaxLength(50);

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Description).IsRequired();

                entity.Property(e => e.QuestionCategoryId).HasColumnName("QuestionCategoryID");

                entity.Property(e => e.Status).HasMaxLength(10);

                entity.Property(e => e.UserAccount)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.AdminAccountNavigation)
                    .WithMany(p => p.ClientCasesAdminAccountNavigation)
                    .HasForeignKey(d => d.AdminAccount)
                    .HasConstraintName("FK_ClientCases_Users2");

                entity.HasOne(d => d.QuestionCategory)
                    .WithMany(p => p.ClientCases)
                    .HasForeignKey(d => d.QuestionCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientCases_QuestionCategories1");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.ClientCases)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_ClientCases_Status");

                entity.HasOne(d => d.UserAccountNavigation)
                    .WithMany(p => p.ClientCasesUserAccountNavigation)
                    .HasForeignKey(d => d.UserAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientCases_Users");
            });

            modelBuilder.Entity<Coupons>(entity =>
            {
                entity.HasKey(e => e.CouponId)
                    .HasName("PK_Coupons_1");

                entity.Property(e => e.CouponId)
                    .HasMaxLength(10)
                    .HasColumnName("CouponID")
                    .IsFixedLength();

                entity.Property(e => e.Discount)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExpirationDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HolderAccount)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategoryID");

                entity.Property(e => e.PublisherAccount)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(10);

                entity.HasOne(d => d.HolderAccountNavigation)
                    .WithMany(p => p.CouponsHolderAccountNavigation)
                    .HasForeignKey(d => d.HolderAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Coupons_Users");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Coupons_ProductCategories1");

                entity.HasOne(d => d.PublisherAccountNavigation)
                    .WithMany(p => p.CouponsPublisherAccountNavigation)
                    .HasForeignKey(d => d.PublisherAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Coupons_Users2");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Coupons_Status");
            });

            modelBuilder.Entity<OrderDetails>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductId })
                    .HasName("PK_OrderDetails_1");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.CouponId)
                    .HasMaxLength(10)
                    .HasColumnName("CouponID")
                    .IsFixedLength();

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(10);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK_OrderDetails_Coupons");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Products");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_OrderDetails_Status");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("PK_Orders_1");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BuyerAccount)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BuyerPhone)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.OrderDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayMethod)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status).HasMaxLength(10);

                entity.HasOne(d => d.BuyerAccountNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.BuyerAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Users2");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Orders_Status");

                entity.HasOne(d => d.Addresses)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => new { d.Address, d.BuyerAccount })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Addresses");
            });

            modelBuilder.Entity<Pictures>(entity =>
            {
                entity.HasKey(e => e.PictureId)
                    .HasName("PK_Pictures_1");

                entity.Property(e => e.PictureId)
                    .HasMaxLength(50)
                    .HasColumnName("PictureID");

                entity.Property(e => e.Path).IsRequired();

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Pictures)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pictures_Products");
            });

            modelBuilder.Entity<ProductCategories>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_ProductCategories_1");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_Products_1");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).IsRequired();

                entity.Property(e => e.LaunchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategoryID");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SellerAccount)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(10);

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_ProductCategories");

                entity.HasOne(d => d.SellerAccountNavigation)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.SellerAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Users");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Products_Status");
            });

            modelBuilder.Entity<QuestionCategories>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_QuestionCategories_1");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Ratings>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.OrderId })
                    .HasName("PK_Ratings_1");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.Status).HasMaxLength(10);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Ratings)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ratings_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Ratings)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ratings_Products");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.Ratings)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Ratings_Status");
            });

            modelBuilder.Entity<Shopping>(entity =>
            {
                entity.HasKey(e => new { e.BuyerAccount, e.ProductId });

                entity.Property(e => e.BuyerAccount).HasMaxLength(50);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.HasOne(d => d.BuyerAccountNavigation)
                    .WithMany(p => p.Shopping)
                    .HasForeignKey(d => d.BuyerAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shopping_Users");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Shopping)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shopping_Products");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.Property(e => e.StatusId)
                    .HasMaxLength(10)
                    .HasColumnName("StatusID");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.Account)
                    .HasName("PK_Users_1");

                entity.Property(e => e.Account).HasMaxLength(50);

                entity.Property(e => e.AccountType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Gender).HasMaxLength(10);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RegisterDate).HasColumnType("date");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}